{"ast":null,"code":"import Actions from \"./entries-manager-action-constants\";\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\nimport { fetchEntries } from \"./entries-manager-api.js\";\n\nfunction* addEntriesSaga(action) {\n  try {\n    console.log(action);\n    yield put({\n      type: Actions.ADD_ENTRY_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: Actions.ADD_ENTRY_FAILURE\n    });\n    console.log(\"error occured while fetching entries\", error);\n  }\n}\n\nfunction* fetchEntriesSaga(action) {\n  try {\n    console.log(action);\n    const {\n      data\n    } = yield call(fetchEntries);\n    const {\n      entries\n    } = data;\n    const formattedEntries = entries.reduce((acc, item) => {\n      const entry = [moment(item.created_at).format(\"DD-MM-YYYY\"), item.product_name, item.user_name, item.taken, item.consumed, item.returned, item.remaining, {\n        name: \"id\",\n        value: \"test\",\n        options: {\n          display: false\n        }\n      }];\n\n      for (let i = 0; i < 1; i++) {\n        acc.push(entry);\n      }\n\n      return acc;\n    }, []);\n    yield put({\n      type: Actions.FETCH_ENTRY_SUCCESS,\n      data: formattedEntries\n    });\n  } catch (error) {\n    yield put({\n      type: Actions.FETCH_ENTRY_FAILURE\n    });\n    console.log(\"error occured while fetching entries\", error);\n  }\n}\n\nexport default function* entriesMnaagerSagas() {\n  yield all([takeEvery(Actions.ADD_ENTRY_REQUEST, addEntriesSaga), takeEvery(Actions.FETCH_ENTRY_REQUEST, fetchEntriesSaga)]);\n}","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/src/containers/EntriesManager/entries-manager-sagas.js"],"names":["Actions","all","put","call","takeEvery","fetchEntries","addEntriesSaga","action","console","log","type","ADD_ENTRY_SUCCESS","error","ADD_ENTRY_FAILURE","fetchEntriesSaga","data","entries","formattedEntries","reduce","acc","item","entry","moment","created_at","format","product_name","user_name","taken","consumed","returned","remaining","name","value","options","display","i","push","FETCH_ENTRY_SUCCESS","FETCH_ENTRY_FAILURE","entriesMnaagerSagas","ADD_ENTRY_REQUEST","FETCH_ENTRY_REQUEST"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oCAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AACA,UAAUC,cAAV,CAAyBC,MAAzB,EAAiC;AAC7B,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAML,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAEV,OAAO,CAACW;AAAhB,KAAD,CAAT;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,UAAMV,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAEV,OAAO,CAACa;AAAhB,KAAD,CAAT;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDG,KAApD;AACH;AACJ;;AAED,UAAUE,gBAAV,CAA2BP,MAA3B,EAAmC;AAC/B,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAY,MAAMZ,IAAI,CAACE,YAAD,CAA5B;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAeD,IAArB;AACA,UAAME,gBAAgB,GAAGD,OAAO,CAACE,MAAR,CAAe,CAACC,GAAD,EAAKC,IAAL,KAAc;AAClD,YAAMC,KAAK,GAAG,CACVC,MAAM,CAACF,IAAI,CAACG,UAAN,CAAN,CAAwBC,MAAxB,CAA+B,YAA/B,CADU,EAEVJ,IAAI,CAACK,YAFK,EAGVL,IAAI,CAACM,SAHK,EAIVN,IAAI,CAACO,KAJK,EAKVP,IAAI,CAACQ,QALK,EAMVR,IAAI,CAACS,QANK,EAOVT,IAAI,CAACU,SAPK,EAQV;AACIC,QAAAA,IAAI,EAAE,IADV;AAEIC,QAAAA,KAAK,EAAC,MAFV;AAGIC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AADF;AAHb,OARU,CAAd;;AAgBA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC,CAAjB,EAAoBA,CAAC,EAArB,EAAwB;AACpBhB,QAAAA,GAAG,CAACiB,IAAJ,CAASf,KAAT;AACH;;AAED,aAAOF,GAAP;AACH,KAtBwB,EAsBvB,EAtBuB,CAAzB;AAuBA,UAAMjB,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAEV,OAAO,CAACqC,mBAAhB;AAAoCtB,MAAAA,IAAI,EAACE;AAAzC,KAAD,CAAT;AACH,GA5BD,CA4BE,OAAOL,KAAP,EAAc;AACZ,UAAMV,GAAG,CAAC;AAAEQ,MAAAA,IAAI,EAAEV,OAAO,CAACsC;AAAhB,KAAD,CAAT;AACA9B,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDG,KAApD;AACH;AACJ;;AAED,eAAe,UAAU2B,mBAAV,GAAgC;AAC3C,QAAMtC,GAAG,CAAC,CACNG,SAAS,CAACJ,OAAO,CAACwC,iBAAT,EAA4BlC,cAA5B,CADH,EAENF,SAAS,CAACJ,OAAO,CAACyC,mBAAT,EAA8B3B,gBAA9B,CAFH,CAAD,CAAT;AAIH","sourcesContent":["import Actions from \"./entries-manager-action-constants\";\nimport { all, put, call, takeEvery } from \"redux-saga/effects\";\nimport { fetchEntries } from \"./entries-manager-api.js\";\nfunction* addEntriesSaga(action) {\n    try {\n        console.log(action);\n        yield put({ type: Actions.ADD_ENTRY_SUCCESS });\n    } catch (error) {\n        yield put({ type: Actions.ADD_ENTRY_FAILURE });\n        console.log(\"error occured while fetching entries\", error);\n    }\n}\n\nfunction* fetchEntriesSaga(action) {\n    try {\n        console.log(action);\n        const { data }  = yield call(fetchEntries);\n        const { entries }  = data\n        const formattedEntries = entries.reduce((acc,item) => {\n            const entry = [\n                moment(item.created_at).format(\"DD-MM-YYYY\"),\n                item.product_name,\n                item.user_name,\n                item.taken,\n                item.consumed,\n                item.returned,\n                item.remaining,\n                {\n                    name: \"id\",\n                    value:\"test\",\n                    options: {\n                      display: false,\n                    }\n                  },    \n            ]\n            for(let i = 0; i<1; i++){\n                acc.push(entry);\n            }\n            \n            return acc;\n        },[])\n        yield put({ type: Actions.FETCH_ENTRY_SUCCESS,data:formattedEntries })\n    } catch (error) {\n        yield put({ type: Actions.FETCH_ENTRY_FAILURE })\n        console.log(\"error occured while fetching entries\", error);\n    }\n}\n\nexport default function* entriesMnaagerSagas() {\n    yield all([\n        takeEvery(Actions.ADD_ENTRY_REQUEST, addEntriesSaga),\n        takeEvery(Actions.FETCH_ENTRY_REQUEST, fetchEntriesSaga)\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}