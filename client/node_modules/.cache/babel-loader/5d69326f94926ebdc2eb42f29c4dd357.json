{"ast":null,"code":"import ActionTypes from './entries-manager-action-constants';\nconst INITIAL_STATE = {\n  entries: [],\n  addEntryModalShowing: false\n};\n\nconst Reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_ENTRY_SUCCESS:\n      let entries = [...state.entries];\n      entries = entries.concat(action.data);\n      return { ...state,\n        entries: entries\n      };\n\n    case ActionTypes.OPEN_ADD_ENTRY_MODAL:\n      return { ...state,\n        addEntryModalShowing: true\n      };\n\n    case ActionTypes.CLOSE_ADD_ENTRY_MODAL:\n      return { ...state,\n        addEntryModalShowing: false\n      };\n\n    case ActionTypes.ADD_ENTRY_SUCCESS: // case REHYDRATE:\n    //   return {\n    //     ...state,\n    //     users: [] \n    //   };\n\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/src/containers/EntriesManager/entries-manager-reducer.js"],"names":["ActionTypes","INITIAL_STATE","entries","addEntryModalShowing","Reducer","state","action","type","FETCH_ENTRY_SUCCESS","concat","data","OPEN_ADD_ENTRY_MODAL","CLOSE_ADD_ENTRY_MODAL","ADD_ENTRY_SUCCESS"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oCAAxB;AAGA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAC,EADY;AAEpBC,EAAAA,oBAAoB,EAAC;AAFD,CAAtB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKP,WAAW,CAACQ,mBAAjB;AACE,UAAIN,OAAO,GAAG,CACZ,GAAGG,KAAK,CAACH,OADG,CAAd;AAGAA,MAAAA,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAeH,MAAM,CAACI,IAAtB,CAAV;AACA,aAAM,EACJ,GAAGL,KADC;AAEHH,QAAAA,OAAO,EAACA;AAFL,OAAN;;AAIF,SAAKF,WAAW,CAACW,oBAAjB;AACE,aAAO,EAAC,GAAGN,KAAJ;AAAUF,QAAAA,oBAAoB,EAAC;AAA/B,OAAP;;AACF,SAAKH,WAAW,CAACY,qBAAjB;AACE,aAAO,EAAC,GAAGP,KAAJ;AAAUF,QAAAA,oBAAoB,EAAC;AAA/B,OAAP;;AACF,SAAKH,WAAW,CAACa,iBAAjB,CAdF,CAeI;AACA;AACA;AACA;AACA;;AACF;AACE,aAAOR,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,OAAf","sourcesContent":["import ActionTypes from './entries-manager-action-constants';\n\n\nconst INITIAL_STATE = {\n  entries:[],\n  addEntryModalShowing:false\n};\n\nconst Reducer = (state = INITIAL_STATE, action) => {\n  switch(action.type){\n    case ActionTypes.FETCH_ENTRY_SUCCESS:\n      let entries = [\n        ...state.entries\n    ];\n      entries = entries.concat(action.data);\n      return{\n        ...state,\n         entries:entries\n      }\n    case ActionTypes.OPEN_ADD_ENTRY_MODAL:\n      return {...state,addEntryModalShowing:true}\n    case ActionTypes.CLOSE_ADD_ENTRY_MODAL:\n      return {...state,addEntryModalShowing:false}\n    case ActionTypes.ADD_ENTRY_SUCCESS:\n      // case REHYDRATE:\n      //   return {\n      //     ...state,\n      //     users: [] \n      //   };\n    default:\n      return state\n  }\n}\n\nexport default Reducer;\n\n"]},"metadata":{},"sourceType":"module"}