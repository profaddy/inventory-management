{"ast":null,"code":"import Actions from \"./user-manager-action-constants\";\nimport { all, put, select, takeEvery } from \"redux-saga/effects\";\n\nconst getUsers = state => state.UserManager.users;\n\nconst doesUserExist = (user, userList) => {\n  try {\n    let result = false;\n    const filteredUsers = userList.filter(item => item.username === user.username);\n    console.log(filteredUsers, \"filteredUsers\");\n\n    if (filteredUsers.length > 0) {\n      console.error(\"user already exist\");\n      result = true;\n    }\n\n    return result;\n  } catch (error) {\n    console.log(\"error while validating duplicate user\", error);\n  }\n};\n\nexport function* userLoginSaga(action) {\n  try {\n    const users = yield select(getUsers);\n    console.log(doesUserExist(action.user, users), \"test\");\n\n    if (doesUserExist(action.user, users)) {\n      yield put({\n        type: Actions.ADD_USER_FAILURE\n      });\n      return; // throw new Error(\"user already exist\")\n    }\n\n    yield put({\n      type: Actions.ADD_USER_SUCCESS,\n      user: action.user\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: Actions.ADD_USER_FAILURE\n    });\n  }\n}\nexport function* userLogoutSaga(action) {\n  console.log(action);\n}\nexport default function* userManagerSagas() {\n  yield all([takeEvery(Actions.ADD_USER_REQUEST, userLoginSaga), takeEvery(Actions.FETCH_USER_REQUEST, userLogoutSaga) // takeEvery(Actions.FETCH_USERS_REQUEST, fetchUsersSaga),\n  // takeEvery(Actions.CREATE_USER_REQUEST, createUserSaga),\n  // takeEvery(Actions.DELETE_USER_REQUEST, deleteUserSaga),\n  // takeEvery(Actions.GET_USER_DETAILS_REQUEST, getUserDetailsSaga),\n  // takeEvery(Actions.RESET_PASSWORD_REQUEST, resetPasswordSaga)\n  ]);\n}","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/src/containers/UserManager/user-manager-sagas.js"],"names":["Actions","all","put","select","takeEvery","getUsers","state","UserManager","users","doesUserExist","user","userList","result","filteredUsers","filter","item","username","console","log","length","error","userLoginSaga","action","type","ADD_USER_FAILURE","ADD_USER_SUCCESS","userLogoutSaga","userManagerSagas","ADD_USER_REQUEST","FETCH_USER_REQUEST"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iCAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,oBAA5C;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAYA,KAAK,CAACC,WAAN,CAAkBC,KAA/C;;AACA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAMC,QAAN,KAAmB;AACrC,MAAG;AACH,QAAIC,MAAM,GAAG,KAAb;AACA,UAAMC,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkBN,IAAI,CAACM,QAAjD,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAA0B,eAA1B;;AACA,QAAGA,aAAa,CAACM,MAAd,GAAuB,CAA1B,EAA4B;AACxBF,MAAAA,OAAO,CAACG,KAAR,CAAc,oBAAd;AACAR,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,WAAOA,MAAP;AACC,GATD,CASC,OAAMQ,KAAN,EAAY;AACTH,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAoDE,KAApD;AACH;AACJ,CAbD;;AAcA,OAAO,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AACnC,MAAI;AACA,UAAMd,KAAK,GAAG,MAAML,MAAM,CAACE,QAAD,CAA1B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYT,aAAa,CAACa,MAAM,CAACZ,IAAR,EAAaF,KAAb,CAAzB,EAA6C,MAA7C;;AACA,QAAGC,aAAa,CAACa,MAAM,CAACZ,IAAR,EAAaF,KAAb,CAAhB,EAAoC;AAChC,YAAMN,GAAG,CAAC;AAAEqB,QAAAA,IAAI,EAAEvB,OAAO,CAACwB;AAAhB,OAAD,CAAT;AACA,aAFgC,CAGhC;AACH;;AACD,UAAMtB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEvB,OAAO,CAACyB,gBAAhB;AAAkCf,MAAAA,IAAI,EAACY,MAAM,CAACZ;AAA9C,KAAD,CAAT;AACH,GATD,CASE,OAAOU,KAAP,EAAc;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAMlB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAEvB,OAAO,CAACwB;AAAhB,KAAD,CAAT;AAEH;AACJ;AAED,OAAO,UAAUE,cAAV,CAAyBJ,MAAzB,EAAgC;AACnCL,EAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACH;AAED,eAAe,UAAUK,gBAAV,GAA6B;AACxC,QAAM1B,GAAG,CAAC,CACNG,SAAS,CAACJ,OAAO,CAAC4B,gBAAT,EAA2BP,aAA3B,CADH,EAENjB,SAAS,CAACJ,OAAO,CAAC6B,kBAAT,EAA6BH,cAA7B,CAFH,CAGN;AACA;AACA;AACA;AACA;AAPM,GAAD,CAAT;AASH","sourcesContent":["import Actions from \"./user-manager-action-constants\";\nimport { all, put, select, takeEvery } from \"redux-saga/effects\";\n\nconst getUsers = (state) =>  state.UserManager.users\nconst doesUserExist = (user,userList) => {\n    try{\n    let result = false\n    const filteredUsers = userList.filter((item) => item.username === user.username);\n    console.log(filteredUsers,\"filteredUsers\")\n    if(filteredUsers.length > 0){\n        console.error(\"user already exist\")\n        result = true\n    }\n    return result;\n    }catch(error){\n        console.log(\"error while validating duplicate user\",error)\n    }\n}\nexport function* userLoginSaga(action) {\n    try {\n        const users = yield select(getUsers);\n        console.log(doesUserExist(action.user,users),\"test\")\n        if(doesUserExist(action.user,users)){\n            yield put({ type: Actions.ADD_USER_FAILURE });\n            return\n            // throw new Error(\"user already exist\")\n        }\n        yield put({ type: Actions.ADD_USER_SUCCESS, user:action.user });\n    } catch (error) {\n        console.log(error)\n        yield put({ type: Actions.ADD_USER_FAILURE });\n\n    }\n}\n\nexport function* userLogoutSaga(action){\n    console.log(action)\n}\n\nexport default function* userManagerSagas() {\n    yield all([\n        takeEvery(Actions.ADD_USER_REQUEST, userLoginSaga),\n        takeEvery(Actions.FETCH_USER_REQUEST, userLogoutSaga)\n        // takeEvery(Actions.FETCH_USERS_REQUEST, fetchUsersSaga),\n        // takeEvery(Actions.CREATE_USER_REQUEST, createUserSaga),\n        // takeEvery(Actions.DELETE_USER_REQUEST, deleteUserSaga),\n        // takeEvery(Actions.GET_USER_DETAILS_REQUEST, getUserDetailsSaga),\n        // takeEvery(Actions.RESET_PASSWORD_REQUEST, resetPasswordSaga)\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}