{"ast":null,"code":"var _jsxFileName = \"/home/adnan/Desktop/pocs/employee-management/app/client/src/components/ToggleComponent/ToggleComponent.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport styles from \"./styles\";\n\nclass ToggleComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleToggleChange = (event, value) => {\n      if (value !== null) {\n        this.setState({ ...this.state,\n          selected: value\n        });\n        this.props.input.onChange(this.getTransformedValue(value));\n      }\n    };\n\n    this.getTransformedValue = value => {\n      const {\n        transform\n      } = this.props;\n\n      if (transform) {\n        switch (transform) {\n          case \"string\":\n            value = String(value);\n            break;\n\n          case \"boolean\":\n            value = Boolean(value);\n            break;\n\n          default:\n            value = Boolean(value);\n        }\n      }\n\n      return value;\n    };\n\n    this.getValue = (value, transform) => {\n      let finalValue = value;\n\n      if (transform) {\n        switch (transform) {\n          case \"string\":\n            finalValue = Boolean(value);\n            break;\n\n          case \"boolean\":\n            finalValue = Boolean(value);\n            break;\n\n          default:\n            finalValue = Boolean(value);\n        }\n      }\n\n      return finalValue;\n    };\n\n    this.state = {\n      selected: this.getValue(props.input.value, props.transform)\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      label,\n      width,\n      height,\n      disabled\n    } = this.props;\n    return React.createElement(React.Fragment, null, label && React.createElement(\"div\", {\n      className: classes.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, label), React.createElement(\"div\", {\n      className: classes.toggleButtonWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(ToggleButtonGroup, {\n      id: \"omnisci.installation.type\",\n      value: this.state.selected,\n      exclusive: true,\n      onChange: this.handleToggleChange,\n      classes: {\n        root: classes.toggleButtonGroupRoot\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.props.options.map((option, key) => React.createElement(ToggleButton, {\n      tourid: `react_tour__${option.value}`,\n      style: {\n        width: width,\n        height: height\n      },\n      key: key,\n      value: option.value,\n      disabled: disabled,\n      classes: {\n        root: classes.toggleButton,\n        selected: classes.toggleButtonGroupSelected\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, option.contentRenderer || option.name)))));\n  }\n\n}\n\nToggleComponent.propTypes = {\n  input: PropTypes.object,\n  options: PropTypes.array,\n  label: PropTypes.string,\n  transform: PropTypes.string,\n  classes: PropTypes.object,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  disabled: PropTypes.bool\n};\nToggleComponent.defaultProps = {\n  input: {\n    value: \"\",\n    onChange: () => {}\n  },\n  options: [],\n  label: \"\"\n};\nexport default withStyles(styles)(ToggleComponent);","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/app/client/src/components/ToggleComponent/ToggleComponent.js"],"names":["React","Component","PropTypes","withStyles","ToggleButton","ToggleButtonGroup","styles","ToggleComponent","constructor","props","handleToggleChange","event","value","setState","state","selected","input","onChange","getTransformedValue","transform","String","Boolean","getValue","finalValue","render","classes","label","width","height","disabled","toggleButtonWrap","root","toggleButtonGroupRoot","options","map","option","key","toggleButton","toggleButtonGroupSelected","contentRenderer","name","propTypes","object","array","string","number","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAqBpCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAOnBC,kBAPmB,GAOE,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACnC,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAChB,aAAKC,QAAL,CAAc,EACV,GAAG,KAAKC,KADE;AAEVC,UAAAA,QAAQ,EAAEH;AAFA,SAAd;AAIA,aAAKH,KAAL,CAAWO,KAAX,CAAiBC,QAAjB,CAA0B,KAAKC,mBAAL,CAAyBN,KAAzB,CAA1B;AACH;AACJ,KAfkB;;AAAA,SAiBnBM,mBAjBmB,GAiBIN,KAAD,IAAW;AAC7B,YAAM;AAAEO,QAAAA;AAAF,UAAgB,KAAKV,KAA3B;;AACA,UAAIU,SAAJ,EAAe;AACX,gBAAQA,SAAR;AACA,eAAK,QAAL;AACIP,YAAAA,KAAK,GAAGQ,MAAM,CAACR,KAAD,CAAd;AACA;;AACJ,eAAK,SAAL;AACIA,YAAAA,KAAK,GAAGS,OAAO,CAACT,KAAD,CAAf;AACA;;AACJ;AACIA,YAAAA,KAAK,GAAGS,OAAO,CAACT,KAAD,CAAf;AARJ;AAUH;;AAED,aAAOA,KAAP;AACH,KAjCkB;;AAAA,SAmCnBU,QAnCmB,GAmCR,CAACV,KAAD,EAAQO,SAAR,KAAsB;AAC7B,UAAII,UAAU,GAAGX,KAAjB;;AACA,UAAIO,SAAJ,EAAe;AACX,gBAAQA,SAAR;AACA,eAAK,QAAL;AACII,YAAAA,UAAU,GAAGF,OAAO,CAACT,KAAD,CAApB;AACA;;AACJ,eAAK,SAAL;AACIW,YAAAA,UAAU,GAAGF,OAAO,CAACT,KAAD,CAApB;AACA;;AACJ;AACIW,YAAAA,UAAU,GAAGF,OAAO,CAACT,KAAD,CAApB;AARJ;AAUH;;AAED,aAAOW,UAAP;AACH,KAnDkB;;AAEf,SAAKT,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KAAKO,QAAL,CAAcb,KAAK,CAACO,KAAN,CAAYJ,KAA1B,EAAiCH,KAAK,CAACU,SAAvC;AADD,KAAb;AAGH;;AAgDDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA,KAAlB;AAAyBC,MAAAA,MAAzB;AAAiCC,MAAAA;AAAjC,QAA8C,KAAKpB,KAAzD;AACA,WACI,0CACKiB,KAAK,IACF;AAAK,MAAA,SAAS,EAAED,OAAO,CAACC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,KADL,CAFR,EAMI;AAAK,MAAA,SAAS,EAAED,OAAO,CAACK,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,iBAAD;AACI,MAAA,EAAE,EAAC,2BADP;AAEI,MAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWC,QAFtB;AAGI,MAAA,SAAS,MAHb;AAII,MAAA,QAAQ,EAAE,KAAKL,kBAJnB;AAKI,MAAA,OAAO,EAAE;AACLqB,QAAAA,IAAI,EAAEN,OAAO,CAACO;AADT,OALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQK,KAAKvB,KAAL,CAAWwB,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,MAAD,EAASC,GAAT,KACpB,oBAAC,YAAD;AACI,MAAA,MAAM,EAAK,eAAcD,MAAM,CAACvB,KAAM,EAD1C;AAEI,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAEA,KAAT;AAAgBC,QAAAA,MAAM,EAACA;AAAvB,OAFX;AAGI,MAAA,GAAG,EAAEQ,GAHT;AAII,MAAA,KAAK,EAAED,MAAM,CAACvB,KAJlB;AAKI,MAAA,QAAQ,EAAEiB,QALd;AAMI,MAAA,OAAO,EAAE;AACLE,QAAAA,IAAI,EAAEN,OAAO,CAACY,YADT;AAELtB,QAAAA,QAAQ,EAAEU,OAAO,CAACa;AAFb,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUKH,MAAM,CAACI,eAAP,IAA0BJ,MAAM,CAACK,IAVtC,CADH,CARL,CADJ,CANJ,CADJ;AAkCH;;AA9GmC;;AAAlCjC,e,CACKkC,S,GAAY;AACfzB,EAAAA,KAAK,EAAEd,SAAS,CAACwC,MADF;AAEfT,EAAAA,OAAO,EAAE/B,SAAS,CAACyC,KAFJ;AAGfjB,EAAAA,KAAK,EAAExB,SAAS,CAAC0C,MAHF;AAIfzB,EAAAA,SAAS,EAAEjB,SAAS,CAAC0C,MAJN;AAKfnB,EAAAA,OAAO,EAAEvB,SAAS,CAACwC,MALJ;AAMff,EAAAA,KAAK,EAAEzB,SAAS,CAAC2C,MANF;AAOfjB,EAAAA,MAAM,EAAE1B,SAAS,CAAC2C,MAPH;AAQfhB,EAAAA,QAAQ,EAAE3B,SAAS,CAAC4C;AARL,C;AADjBvC,e,CAYKwC,Y,GAAe;AAClB/B,EAAAA,KAAK,EAAE;AACHJ,IAAAA,KAAK,EAAE,EADJ;AAEHK,IAAAA,QAAQ,EAAE,MAAM,CAAE;AAFf,GADW;AAKlBgB,EAAAA,OAAO,EAAE,EALS;AAMlBP,EAAAA,KAAK,EAAE;AANW,C;AAqG1B,eAAevB,UAAU,CAACG,MAAD,CAAV,CAAmBC,eAAnB,CAAf","sourcesContent":["import React, { Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport styles from \"./styles\";\n\nclass ToggleComponent extends Component {\n    static propTypes = {\n        input: PropTypes.object,\n        options: PropTypes.array,\n        label: PropTypes.string,\n        transform: PropTypes.string,\n        classes: PropTypes.object,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        disabled: PropTypes.bool\n    }\n\n    static defaultProps = {\n        input: {\n            value: \"\",\n            onChange: () => {}\n        },\n        options: [],\n        label: \"\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: this.getValue(props.input.value, props.transform)\n        };\n    }\n\n    handleToggleChange = (event, value) => {\n        if (value !== null) {\n            this.setState({\n                ...this.state,\n                selected: value\n            });\n            this.props.input.onChange(this.getTransformedValue(value));\n        }\n    };\n\n    getTransformedValue = (value) => {\n        const { transform } = this.props;\n        if (transform) {\n            switch (transform) {\n            case \"string\":\n                value = String(value);\n                break;\n            case \"boolean\":\n                value = Boolean(value);\n                break;\n            default:\n                value = Boolean(value);\n            }\n        }\n\n        return value;\n    }\n\n    getValue = (value, transform) => {\n        let finalValue = value;\n        if (transform) {\n            switch (transform) {\n            case \"string\":\n                finalValue = Boolean(value);\n                break;\n            case \"boolean\":\n                finalValue = Boolean(value);\n                break;\n            default:\n                finalValue = Boolean(value);\n            }\n        }\n\n        return finalValue;\n    }\n\n    render() {\n        const { classes, label, width, height, disabled } = this.props;\n        return (\n            <>\n                {label &&\n                    <div className={classes.label}>\n                        {label}\n                    </div>\n                }\n                <div className={classes.toggleButtonWrap}>\n                    <ToggleButtonGroup\n                        id=\"omnisci.installation.type\"\n                        value={this.state.selected}\n                        exclusive\n                        onChange={this.handleToggleChange}\n                        classes={{\n                            root: classes.toggleButtonGroupRoot\n                        }}>\n                        {this.props.options.map((option, key) => (\n                            <ToggleButton\n                                tourid = {`react_tour__${option.value}`}\n                                style={{ width: width, height:height }}\n                                key={key}\n                                value={option.value}\n                                disabled={disabled}\n                                classes={{\n                                    root: classes.toggleButton,\n                                    selected: classes.toggleButtonGroupSelected\n                                }}>\n                                {option.contentRenderer || option.name}\n                            </ToggleButton>\n                        ))}\n                    </ToggleButtonGroup>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default withStyles(styles)(ToggleComponent);\n"]},"metadata":{},"sourceType":"module"}