{"ast":null,"code":"var _jsxFileName = \"/home/adnan/Desktop/pocs/employee-management/src/components/ModalWrapper/ModalWrapper.js\";\nimport React, { Component } from \"react\"; // import PropTypes from \"prop-types\";\n\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip/Tooltip\";\nimport styles from \"./styles\";\nimport { Modal, Divider, Typography } from \"@material-ui/core\";\nimport { ReactComponent as CloseIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/closeIcon.svg\";\nimport { ReactComponent as MaximizeIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/fullscreen.svg\";\nimport { ReactComponent as MinimizeIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/fullscreenExit.svg\";\nimport { ReactComponent as FormattedPreview } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/filePreview.svg\";\nimport { ReactComponent as RawFile } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/rawFile.svg\"; // import { isReactClass } from \"propValidator\";\n\nclass ModalWrapper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      this.props.onClose();\n    };\n\n    this.componentDidMount = () => {\n      window.addEventListener(\"resize\", this.setWindowWidth);\n    };\n\n    this.getStyles = () => {\n      const {\n        minWidth,\n        minHeight\n      } = this.state;\n\n      if (!this.props.isMaximize) {\n        return {\n          minWidth: this.props.minWidth,\n          minHeight: this.props.minHeight,\n          maxWidth: this.props.maxWidth || 850\n        };\n      } else {\n        return {\n          minWidth,\n          minHeight\n        };\n      }\n    };\n\n    this.setWindowWidth = () => {\n      this.setState({\n        minWidth: window.innerWidth\n      });\n    };\n\n    this.state = {\n      anchorEl: null\n    };\n    this.state = {\n      minWidth: window.innerWidth,\n      minHeight: window.clientHeight\n    };\n  } //   static propTypes = {\n  //       title: PropTypes.string,\n  //       onClose: PropTypes.func,\n  //       showCloseIcon: PropTypes.bool,\n  //       children: PropTypes.node,\n  //       bottomToolbar: PropTypes.node,\n  //       showBottomToolbar: PropTypes.bool,\n  //       fullHeight: PropTypes.bool,\n  //       CloseIcon: isReactClass,\n  //       minWidth: PropTypes.oneOfType([\n  //           PropTypes.number, PropTypes.string\n  //       ]),\n  //       minHeight: PropTypes.oneOfType([\n  //           PropTypes.number, PropTypes.string\n  //       ]),\n  //       classes: PropTypes.object,\n  //       isOpen: PropTypes.bool,\n  //       showResizeOptions:PropTypes.bool,\n  //       toggleWindowSize:PropTypes.func,\n  //       isMaximize:PropTypes.bool,\n  //       showDetailViewIcon:PropTypes.bool,\n  //       toggleDetailView:PropTypes.func,\n  //       isDetailView:PropTypes.bool,\n  //       maxWidth:PropTypes.number\n  //   };\n\n\n  render() {\n    const {\n      isOpen,\n      classes,\n      CloseIcon,\n      showCloseIcon,\n      isMaximize,\n      title,\n      toggleWindowSize,\n      showResizeOptions,\n      showDetailViewIcon,\n      toggleDetailView,\n      isDetailView\n    } = this.props;\n    const tourId = `react_tour__${title}`.replace(/\\s/g, \"\");\n    return React.createElement(Modal, {\n      open: isOpen,\n      onClose: this.closeModal,\n      classes: {\n        root: classes.root\n      },\n      closeAfterTransition: true,\n      disableBackdropClick: true,\n      disableAutoFocus: true,\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      tourid: tourId,\n      className: classNames(classes.modalBodyWrap, {\n        [classes.modalBodyWrapFullHeight]: this.props.fullHeight || isMaximize\n      }),\n      style: this.getStyles(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.modalBodyTitleWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      className: classes.modalBodyTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.props.title), showDetailViewIcon && React.createElement(\"div\", {\n      className: classes.detailPreviewWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, isDetailView ? React.createElement(\"div\", {\n      onClick: () => toggleDetailView(false),\n      className: classes.detailIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Toggle to raw View\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(RawFile, {\n      style: {\n        width: 25,\n        height: 25\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))) : React.createElement(\"div\", {\n      onClick: () => toggleDetailView(true),\n      className: classes.detailIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Toggle to formatted View\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(FormattedPreview, {\n      style: {\n        width: 25,\n        height: 25\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })))), showResizeOptions && React.createElement(React.Fragment, null, isMaximize ? React.createElement(\"div\", {\n      onClick: () => toggleWindowSize(false),\n      className: classes.modalResize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(MinimizeIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      onClick: () => toggleWindowSize(true),\n      className: classes.modalResize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(MaximizeIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }))), showCloseIcon && React.createElement(\"div\", {\n      onClick: this.closeModal,\n      className: classes.modalClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: classes.modalBodyChildWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.props.children), this.props.showBottomToolbar && React.createElement(React.Fragment, null, React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.modalBodyBottomToolbar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, this.props.bottomToolbar))));\n  }\n\n}\n\nModalWrapper.defaultProps = {\n  title: \"\",\n  onClose: () => {},\n  options: {\n    label: \"\"\n  },\n  showBottomToolbar: true,\n  fullHeight: false,\n  minHeight: \"auto\",\n  minWidth: \"auto\",\n  showResizeOptions: false,\n  showDetailViewIcon: false,\n  toggleWindowSize: () => {},\n  isMaximize: false,\n  CloseIcon: CloseIcon\n};\nexport default withStyles(styles)(ModalWrapper);","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/src/components/ModalWrapper/ModalWrapper.js"],"names":["React","Component","classNames","withStyles","Tooltip","styles","Modal","Divider","Typography","ModalWrapper","constructor","props","closeModal","onClose","componentDidMount","window","addEventListener","setWindowWidth","getStyles","minWidth","minHeight","state","isMaximize","maxWidth","setState","innerWidth","anchorEl","clientHeight","render","isOpen","classes","CloseIcon","showCloseIcon","title","toggleWindowSize","showResizeOptions","showDetailViewIcon","toggleDetailView","isDetailView","tourId","replace","root","display","alignItems","justifyContent","modalBodyWrap","modalBodyWrapFullHeight","fullHeight","modalBodyTitleWrap","modalBodyTitle","detailPreviewWrapper","detailIcon","width","height","modalResize","modalClose","modalBodyChildWrap","children","showBottomToolbar","modalBodyBottomToolbar","bottomToolbar","defaultProps","options","label"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip/Tooltip\";\nimport styles  from \"./styles\";\nimport { Modal, Divider, Typography } from \"@material-ui/core\";\nimport { ReactComponent as CloseIcon } from \"../../assets/closeIcon.svg\";\nimport { ReactComponent as MaximizeIcon } from \"../../assets/fullscreen.svg\";\nimport { ReactComponent as MinimizeIcon} from \"../../assets/fullscreenExit.svg\";\nimport { ReactComponent as FormattedPreview } from \"../../assets/filePreview.svg\";\nimport { ReactComponent as RawFile} from \"../../assets/rawFile.svg\";\n// import { isReactClass } from \"propValidator\";\n\nclass ModalWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            anchorEl: null\n        };\n        this.state = {\n            minWidth: window.innerWidth,\n            minHeight: window.clientHeight\n        };\n    }\n//   static propTypes = {\n//       title: PropTypes.string,\n//       onClose: PropTypes.func,\n//       showCloseIcon: PropTypes.bool,\n//       children: PropTypes.node,\n//       bottomToolbar: PropTypes.node,\n//       showBottomToolbar: PropTypes.bool,\n//       fullHeight: PropTypes.bool,\n//       CloseIcon: isReactClass,\n//       minWidth: PropTypes.oneOfType([\n//           PropTypes.number, PropTypes.string\n//       ]),\n//       minHeight: PropTypes.oneOfType([\n//           PropTypes.number, PropTypes.string\n//       ]),\n//       classes: PropTypes.object,\n//       isOpen: PropTypes.bool,\n//       showResizeOptions:PropTypes.bool,\n//       toggleWindowSize:PropTypes.func,\n//       isMaximize:PropTypes.bool,\n//       showDetailViewIcon:PropTypes.bool,\n//       toggleDetailView:PropTypes.func,\n//       isDetailView:PropTypes.bool,\n//       maxWidth:PropTypes.number\n//   };\n\n  static defaultProps = {\n      title: \"\",\n      onClose: () => {},\n      options: { label: \"\" },\n      showBottomToolbar: true,\n      fullHeight: false,\n      minHeight: \"auto\",\n      minWidth: \"auto\",\n      showResizeOptions:false,\n      showDetailViewIcon: false,\n      toggleWindowSize:() => {},\n      isMaximize:false,\n      CloseIcon:CloseIcon\n  };\n  closeModal = () => {\n      this.props.onClose();\n  };\n    componentDidMount = () => {\n        window.addEventListener(\"resize\", this.setWindowWidth);\n\n    }\n  getStyles = () => {\n      const { minWidth, minHeight } = this.state;\n      if(!this.props.isMaximize){\n          return {\n              minWidth: this.props.minWidth,\n              minHeight: this.props.minHeight,\n              maxWidth: this.props.maxWidth || 850\n          };\n      } else {\n          return {\n              minWidth,\n              minHeight\n          };\n      }\n  }\n\n    setWindowWidth = () => {\n        this.setState({ minWidth: window.innerWidth });\n    }\n\n    render() {\n        const {\n            isOpen,\n            classes,\n            CloseIcon,\n            showCloseIcon,\n            isMaximize,\n            title,\n            toggleWindowSize,\n            showResizeOptions,\n            showDetailViewIcon,\n            toggleDetailView,\n            isDetailView\n        } = this.props;\n        \n        const tourId = `react_tour__${title}`.replace(/\\s/g,\"\");\n\n        return (\n            <Modal\n                open={isOpen}\n                onClose={this.closeModal}\n                classes={{ root: classes.root }}\n                closeAfterTransition={true}\n                disableBackdropClick={true}\n                disableAutoFocus={true}\n                style={{display:\"flex\",alignItems:\"center\",justifyContent:\"center\"}}\n            >\n                <div tourid = {tourId} className={classNames(classes.modalBodyWrap, {\n                    [classes.modalBodyWrapFullHeight]: this.props.fullHeight || isMaximize\n                })} style={this.getStyles()}\n                >\n                    <div className={classes.modalBodyTitleWrap}>\n                        <Typography variant=\"h6\" className={classes.modalBodyTitle} >\n                            {this.props.title}\n                        </Typography>\n                        {showDetailViewIcon &&\n                            <div className={classes.detailPreviewWrapper}>\n                                {isDetailView ?\n                                    <div onClick={() => toggleDetailView(false)} className={classes.detailIcon}>\n                                        <Tooltip title={\"Toggle to raw View\"}>\n                                            <RawFile style={{ width: 25, height: 25 }} />\n                                        </Tooltip>\n                                    </div>\n                                    :\n                                    <div onClick={() => toggleDetailView(true)} className={classes.detailIcon}>\n                                        <Tooltip title={\"Toggle to formatted View\"}>\n                                            <FormattedPreview style={{ width: 25, height: 25 }} />\n                                        </Tooltip>\n                                    </div>}\n                            </div>\n                        }\n                        {showResizeOptions &&\n                        <>\n                            {isMaximize ? \n                                <div onClick={() => toggleWindowSize(false)} className={classes.modalResize} >\n                                    <MinimizeIcon />\n                                </div>\n                                :\n                                <div onClick={() => toggleWindowSize(true)} className={classes.modalResize} >\n                                    <MaximizeIcon />\n                                </div>}\n                        </>\n                        }\n                        {showCloseIcon &&\n                        <div onClick={this.closeModal} className={classes.modalClose} >\n                            <CloseIcon />\n                        </div>\n                        }\n\n                    </div>\n                    <div className={classes.modalBodyChildWrap}>\n                        {this.props.children}\n                    </div>\n                    {this.props.showBottomToolbar && \n                    <>\n                        <Divider />\n                        <div className={classes.modalBodyBottomToolbar}>\n                            {this.props.bottomToolbar}\n                        </div>\n                    </>\n                    }\n                </div>\n            </Modal>\n        );\n    }\n}\n\nexport default withStyles(styles)(ModalWrapper);\n"]},"metadata":{},"sourceType":"module"}