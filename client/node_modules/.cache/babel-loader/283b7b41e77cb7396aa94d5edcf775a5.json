{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.createSelectorHook = createSelectorHook;\nexports.useSelector = void 0;\n\nvar _react = require(\"react\");\n\nvar _useReduxContext2 = require(\"./useReduxContext\");\n\nvar _Subscription = _interopRequireDefault(require(\"../utils/Subscription\"));\n\nvar _useIsomorphicLayoutEffect = require(\"../utils/useIsomorphicLayoutEffect\");\n\nvar _Context = require(\"../components/Context\");\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = (0, _react.useReducer)(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = (0, _react.useMemo)(function () {\n    return new _Subscription[\"default\"](store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\n  var latestSelector = (0, _react.useRef)();\n  var latestSelectedState = (0, _react.useRef)();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\n    return (0, _react.useContext)(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelectors\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\n\nvar useSelector =\n/*#__PURE__*/\ncreateSelectorHook();\nexports.useSelector = useSelector;","map":{"version":3,"sources":["/home/adnan/Desktop/pocs/employee-management/node_modules/react-redux/lib/hooks/useSelector.js"],"names":["_interopRequireDefault","require","exports","__esModule","createSelectorHook","useSelector","_react","_useReduxContext2","_Subscription","_useIsomorphicLayoutEffect","_Context","refEquality","a","b","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","_useReducer","useReducer","s","forceRender","subscription","useMemo","latestSubscriptionCallbackError","useRef","latestSelector","latestSelectedState","selectedState","current","getState","err","message","stack","useIsomorphicLayoutEffect","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","context","ReactReduxContext","useReduxContext","useContext","process","env","NODE_ENV","Error","_useReduxContext"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.createSelectorHook = createSelectorHook;\nexports.useSelector = void 0;\n\nvar _react = require(\"react\");\n\nvar _useReduxContext2 = require(\"./useReduxContext\");\n\nvar _Subscription = _interopRequireDefault(require(\"../utils/Subscription\"));\n\nvar _useIsomorphicLayoutEffect = require(\"../utils/useIsomorphicLayoutEffect\");\n\nvar _Context = require(\"../components/Context\");\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = (0, _react.useReducer)(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = (0, _react.useMemo)(function () {\n    return new _Subscription[\"default\"](store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\n  var latestSelector = (0, _react.useRef)();\n  var latestSelectedState = (0, _react.useRef)();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\n    return (0, _react.useContext)(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelectors\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\n\nvar useSelector =\n/*#__PURE__*/\ncreateSelectorHook();\nexports.useSelector = useSelector;"]},"metadata":{},"sourceType":"script"}